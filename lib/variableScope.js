'use strict'; (function() {if (!Polymer || !Polymer.Base) {console.warn('Polymer is not loaded yet. polymer-global-variables cant be used.'); return; } if (Polymer.variableScope) {console.warn('Polymer.variableScope already defined.'); return; } var __configureProperties = Polymer.Base._configureProperties; Polymer.variableScope = {variable: {}, elementsInstances: [], set: function(key, value) {this.variable[key] = value; for (var i in this.elementsInstances) {this.elementsInstances[i].set('variable.' + key, value); } return this.variable; }, get: function(key) {var globalVariable = this.variable[key]; if (typeof globalVariable === 'undefined') {console.warn('No global variable: ', key); return; } return globalVariable; }, getAll: function() {return this.variable; } }; Polymer.Base._addFeature({_configureProperties: function(properties, config) {var ignoreComponent = false; var instances = Polymer.variableScope.elementsInstances; if (properties) {if (properties.ignoreGlobalProperties && properties.ignoreGlobalProperties.value) {ignoreComponent = true; } else {properties.variable = {type: String, value: Polymer.variableScope.variable }; } } if (instances.indexOf(this) < 0 && !ignoreComponent) {Polymer.variableScope.elementsInstances.push(this); } __configureProperties.apply(this, [properties, config]); } }); })();